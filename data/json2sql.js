"use strict";
//all dictionaries are presumed to have a string as the value, otherwise, the sql generated will convert everything to a string in makeJoinTable()
const data = require("./RockAtoPierce.json");
/*this is the new data to be added. 
This json should be generated by getting a csv from the "Cemetery Staging" sheet and then selecting hash at https://csvjson.com/csv2json
result should look like this
{
   "0": {
     "last_name": "ALLEN", 
	 [...]
*/
const dictionaryNames = require("./dataStructures.json").dictionaries;
const writeFileSync = require("fs").writeFileSync;
const escapedor = "|or|"; //this will be replaced with "or", but unlike an " or " literal, won't cause a separation into two possibilities.

const logger = require("node-color-log");
const XMLHttpRequest = require("xhr2");
let dictionaries = {};
let xhrs = [];
dictionaryNames.forEach((dictionaryName, i) => {
	xhrs[i] = new XMLHttpRequest();
	xhrs[i].myDictionaryName = dictionaryName;
	xhrs[i].myIteratorValue = i; //these allow me to pass parameters to the callback
	xhrs[i].onload = saveResponse;
	//xhrs[i].open("GET", "https://mocki.io/v1/d4867d8b-b5d5-4a48-a4ab-79131b5809b8"); //just so i don't flood the server, but can get to the calllback
	xhrs[i].open("GET", "https://dev.findagravemiddleborough.ml/data/dictionaries.php?dictionary=" + dictionaryName);
	xhrs[i].send();
});
function saveResponse() {
	let dictionaryName = this.myDictionaryName;
	let i = this.myIteratorValue;
	dictionaries[dictionaryName] = JSON.parse(this.responseText);
	if (i + 1 === dictionaryNames.length) {
		var x = json2sql();
		writeFileSync("data/generatedsql/RockCemeteryAtoPierce.sql", x); //this runs when the last dictionary has been added
	}
}
//workaround because node is async, this function runs once all the existing dictionaries have been downloaded.
function json2sql() {
	function titleCase(str) {
		//Cases Strings Like This
		let capitalizenextletter = true;
		let strarr = str.split("");
		let newstr = "";
		strarr.forEach((c, i) => {
			if (capitalizenextletter) {
				newstr += c.toUpperCase();
			} else {
				newstr += c.toLowerCase();
			}
			if (c == " " || c == "/") {
				capitalizenextletter = true;
			} else {
				capitalizenextletter = false;
			}
		});
		return newstr;
	}
	function cleanName(str) {
		//Meant for a single name ("Bob" not "Bob Smith"). Properly cases and flags anything with weird capitalization or spaces or length not between 2 and 20
		str = str.trim();
		switch (
			true //Manual Exceptions
		) {
			case /^Ma?c[A-Z][a-z]+$/.test(str):
			case /^O\'[A-Z][a-z]+$/.test(str):
			case /^Le[A-Z][a-z]+$/.test(str):
				return str;
		}
		const newstr = titleCase(str);
		if (/[A-Za-z]{2,20}/.test(str)) {
			//a normal name, but maybe with funny capitalization
			switch (true) {
				case str.toLowerCase() === str:
				case str.toUpperCase() === str:
				case titleCase(str) === newstr:
					return newstr;
			}
		}
		//reason why something is flagged for capitalization is because of the possibility of soemthing like "Arodi orAbodi" [sic]
		//mostly working with standard american names, so any accents could be indication of encoding failure
		//spaces could mean that a name wasn't properly parsed
		logger.warn(`"${str}" should be the properly capitalized first, last, or middle name of a person. If it is, ignore this. Otherwise, fix it where it occurs in the data. It was flagged as a possible error because of its unusual capitalization, non-letters, length, or spaces.`);
		return str;
	}
	//dictionaries = JSON.parse('{"names":{"1":"Allen","2":"Eugene"},"suffixes":{"1":"Jr."},"prefixes":{"1":"Dr."},"places":{"1":"Middleborough"},"branches":{"1":"US Navy"},"ranks":{"1":"E2"},"medallions":{"1":"American Legion"},"wars":{"1":"WW II          (1939 - 1945)"},"cemeteries":{"1":"Rock Cemetery    Highland Street                South Middleborough"}}');
	const prefixOrSuffix = require("./prefixOrSuffix.json"); ///prefixOrSuffix is an object rather than two arrays so that nothing can be simultaneously be listed a prefix and a suffix
	let fatalError = false; //if theres a problem which needs to get fixed before sql, this is flipped. However, the checks continue so all fatal errors can be identified at once.
	Object.keys(data).forEach((id) => {
		let n;
		if ((n = data[id].given_name)) {
			//separate into first_name and middle_name or middle_initial.
			/*this regex checks for anything abnormal, and doesn't attempt to separate them if there is anything abnormal. 
				The "Abodi orArodi"=>["Abodi","Arodi"] problem will be resolved in the verification switch, where cleanName() is called
        */
			if (/^\s*[a-z]+( [a-z](.|[a-z]*))?\s*$/i.test(n)) {
				//above regex allows for periods after middle initials and leading/trailing whitespace even though in the end they'll be stripped.
				const namearr = n.trim().split(" "); //so namearr[0] will be the first name, and namearr[1] will be the middle name/initial or not exist, bc some records just list first name
				switch (namearr.length) {
					case 2:
						if (namearr[1].match(/[a-z]/gi).length === 1) {
							//the reason for the match() is "J." should be interpreted as an initial even though it's two chars.
							//i know match wont be null because of the regex in the if statement
							//middle name and middle initial will probably be merged into one column but im keeping them separate so middlename can go through cleanName() without generating warnings from the initials being only one character.
							data[id]["middle_initial"] = namearr[1].match(/[a-zA-Z]/)[0].toUpperCase();
						} else {
							data[id]["middle_name"] = namearr[1];
						}
					case 1:
						data[id]["first_name"] = namearr[0];
						break;
					default:
						fatalError = true;
						logger.error("FATAL: This one broke the code in the prefiltering of given_name to first_name and middle: " + id + " ||| which is listed as: " + n);
				}
				//check for irregularities
				let recombinated = [];
				if (data[id].hasOwnProperty("first_name")) {
					recombinated.push(data[id]["first_name"]);
				}
				if (data[id].hasOwnProperty("middle_name")) {
					recombinated.push(data[id]["middle_name"]);
				}
				if (data[id].hasOwnProperty("middle_initial")) {
					recombinated.push(data[id]["middle_initial"]);
				}
				if (n.trim() !== recombinated.join(" ")) {
					logger.warn([n, data[id]["first_name"], data[id]["middle_name"], data[id]["middle_initial"]]);
				}
			} else {
				fatalError = true;
				logger.error("FATAL: Manually separate given_name into middle initial/middle_name and first name in the data json: [" + id + "] has a given_name [" + n + "]");
			}
		}
		if ((n = data[id].prefix_suffix)) {
			if (prefixOrSuffix[n + "."]) {
				n = n + ".";
			}
			if (prefixOrSuffix[n]) {
				if (prefixOrSuffix[n] === "prefix") {
					data[id].prefix = n;
				} else if (prefixOrSuffix[n] === "suffix") {
					data[id].suffix = n;
				} else {
					logger.error("Fatal Error: prefixOrSuffix.json has " + n + " not listed as either 'suffix' or 'prefix'");
					fatalError = true;
				}
			} else {
				logger.error(`Fatal Error: the prefix or suffix ${n} must be added to the prefixOrSuffix object as a key with value "prefix" or "suffix"`);
				fatalError = true;
			}
		}

		//now that all the new fields we wanted to make have been added, lets verify ALL the fields in the data to make sure they have a corresponding column in the sql and will meet the constraints of that column
		//in this we logger.warn for any values that seem off, and throwError() for anything that wouldn't fit the datatype of the sql column or are just clearly wrong (year 30005)
		const throwError = (key, id, i, data, reqs) => {
			fatalError = true;
			logger.error(`Fatal Error: ID ${id}'s ${key} (alternative #${i}) is bad -- it's ${data[id][key][i]} as a ${typeof data[id][key][i]} and it needs to ${reqs}.`);
		};
		Object.keys(data[id]).forEach((key) => {
			if (data[id][key] == "" || key === "prefix_suffix" || key === "given_name") {
				delete data[id][key];
			} else {
				if (/ or /.test(data[id][key])) {
					logger.info(data[id][key] + " has been split into " + JSON.stringify(data[id][key].split(" or ")));
					data[id][key] = data[id][key].split(" or ");
				} else {
					data[id][key] = [data[id][key]]; //just useful to have them all be arrays
				}
				data[id][key].forEach((dontusethisbecauseanychangesmadealreadywontbereflectedinitnorchangesmadetoitpreserved, i) => {
					if (typeof data[id][key][i] === "string") {
						data[id][key][i] = data[id][key][i].replace(escapedor, "or"); //escapedor \or gets replaced with or but stops it from being interpreted as an array of values.
						if (/^\s*[0-9]+\s*$/.test(data[id][key][i])) {
							//replacing anything that's str
							data[id][key][i] = +data[id][key][i];
						} else if (/"/.test(data[id][key][i])) {
							//else if because it was the first if converted it to a number
							data[id][key][i].replace('"', "&quot;");
						}
					}

					switch (
						key //THIS IS BAD BECAUSE OF LACK OF TYPECHECKS
					) {
						case "prefix":
							if (!prefixOrSuffix.hasOwnProperty(data[id][key][i]) || prefixOrSuffix[data[id][key][i]] !== "prefix") {
								throwError(key, id, i, data, "be in the prefixOrSuffix.json as a prefix");
							}
							break;
						case "suffix":
							if (!prefixOrSuffix.hasOwnProperty(data[id][key][i]) || prefixOrSuffix[data[id][key][i]] !== "suffix") {
								throwError(key, id, i, data, "be in the prefixOrSuffix.json as a suffix");
							}
							break;
						case "last_name":
						case "maiden_name":
						case "first_name":
						case "middle_name":
							data[id][key][i] = cleanName(data[id][key][i]);
							if (!/^.{1,30}$/.test(data[id][key][i])) {
								throwError(key, id, i, data, "be between 1 and 30 characters and shouldn't contain a newline");
							}
							break;
						case "middle_initial":
							data[id][key][i] = data[id][key][i].toUpperCase();
							if (!/^[A-Z]$/.test(data[id][key][i])) {
								throwError(key, id, i, data, "be one capital letter from A-Z...but the code should have made sure this was true before here");
							}
							break;
						case "birth_month":
						case "entry_month":
						case "exit_month":
						case "death_month":
							if (!Number.isInteger(data[id][key][i]) || data[id][key][i] < 1 || data[id][key][i] > 12) {
								throwError(key, id, i, data, "be between 1 and 12");
							}
							break;
						case "birth_year":
						case "death_year":
						case "entry_year":
						case "exit_year":
							if (!Number.isInteger(data[id][key][i]) || data[id][key][i] < 1500 || data[id][key][i] > 2100) {
								throwError(key, id, i, data, "be an integer between 1500 and 2100");
							}
							break;
						case "find_a_grave_memorial_number":
						case "service_number":
						case "count":
							if (!Number.isInteger(data[id][key][i])) {
								throwError(key, id, i, data, "be a number");
							}
							break;
						case "veteran_status_verified":
						case "records_checked":
							if (typeof data[id][key][i] !== "boolean") {
								throwError(key, id, i, data, "be either true or false");
							}
						case "birth_day":
						case "death_day":
						case "entry_day":
						case "exit_day":
							if (!Number.isInteger(data[id][key][i]) || data[id][key][i] < 1 || data[id][key][i] > 31) {
								throwError(key, id, i, data, "be between 1 and 31");
							}
							break;
						case "birth_place":
						case "death_place":
						case "rank":
						case "branch":
						case "unit":
						case "war":
						case "medallion":
						case "cemetery":
						case "location_in_cemetery":
						case "cenotaphs":
						case "notes":
						case "father_name":
						case "mother_name":
						case "spouse_name":
						case "resident_id":
							if (typeof data[id][key][i] !== "string" || data[id][key][i].length > 250) {
								throwError(key, id, i, data, "be a string less than 250 chars");
							}
							break;
						default:
							logger.error(`FATAL ERROR: ${key} is not a known datatype`);
					}
				});
			}
		});
	});
	if (fatalError) {
		throw new Error("Fix the above fatal errors before you may proceed");
	}
	Object.keys(data).forEach((id) => {
		if (data[id].hasOwnProperty("middle_initial")) {
			data[id]["middle_name"]=data[id]["middle_initial"];
		}
	});
	/*
returns an array of arrays-with-length-2 that consist of ids (unique grave identifier from the toplevel keys of the data object) and the integer representation of a name
One id may be repeated in this because sometimes the last name isn't known and could be one of two options
Eg if names (a dictionary) is {"1":"Allen","2":"Eugene"...], and grave id 0 is unclear between the two, then [[0,1],[0,2]] will be returned
TLDR; this function adds values to the dictionary as needed and returns [[id in data,key in dictionary of "field" Value],...] each time a "field" exists on one of the objects in "data"
*/
	function makeJoinTable(field, dictionaryName = "") {
		let resultstr = "";
		Object.keys(data).forEach((id) => {
			if (data[id].hasOwnProperty(field)) {
				data[id][field].forEach((dontusethisnochangeswillbereflected, i) => {
					if (typeof data[id][field][i] !== undefined && data[id][field][i] !== null && data[id][field][i] !== "") {
						const value = data[id][field][i];
						if (dictionaryName == "") {
							if (typeof data[id][field][i] === "string") {
								data[id][field][i] = '"' + data[id][field][i] + '"';
							}
							resultstr += "INSERT INTO `" + field + "` (id, i) VALUES (" + id + "," + data[id][field][i] + ");";
						} else {
							const nextIndex = +Array.from(Object.keys(dictionaries[dictionaryName])).sort((a, b) => +b - +a)[0] + 1;
							if (!Object.values(dictionaries[dictionaryName]).includes(value)) {
								dictionaries[dictionaryName][nextIndex] = value; //that way the value is there for any subsequent runs
								resultstr += "INSERT INTO `" + dictionaryName + "` VALUES (" + nextIndex + ',"' + value + '");';
							}
							resultstr += "INSERT INTO `id_join_" + field + "` (id, i) VALUES (" + id + "," + Object.keys(dictionaries[dictionaryName]).find((v) => dictionaries[dictionaryName][v] === value) + ");";
						}
					} else {
						throw new Error("Somethings off about the " + field + " of " + id);
					}
				});
			}
		});
		return resultstr; //also the dictionary has been modified
	}
	//so now we create our tables from the json, which we know has only good fields with good values.

	const letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
	let sql = "START TRANSACTION;";
	const joinTables = require("./dataStructures.json").joinTables;
	joinTables.forEach((v) => (sql += makeJoinTable(v[0].replace("id_join_", ""), v[1])));
	require("./dataStructures.json").dataTables.forEach((field) => (sql += makeJoinTable(field)));
	sql += "END TRANSACTION";
	return sql;
}
